-- MySQL dump 10.13  Distrib 8.0.33, for Linux (x86_64)
--
-- Host: 127.0.0.1    Database: simple-codebase
-- ------------------------------------------------------
-- Server version	5.7.41

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `article`
--

DROP TABLE IF EXISTS `article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `create_time` varchar(255) NOT NULL,
  `update_time` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=61 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES (2,'shardingsphere encryption perf','2023-05-08 09:16:15','2023-09-12 16:24:13'),(3,'\"x\" permission for folder in linux','2023-05-08 09:16:17','2023-05-10 09:10:31'),(4,'inspect port in use','2023-05-08 09:16:18','2023-05-10 09:17:05'),(5,'kotlin logger utility','2023-05-08 09:16:18','2023-05-10 18:11:49'),(6,'wrap spring mvc return type','2023-05-08 09:16:19','2023-05-23 16:04:43'),(7,'kotlin maven config','2023-05-08 09:16:20','2023-07-05 14:39:17'),(8,'java spi demo','2023-05-08 09:16:20','2023-05-10 09:15:25'),(36,'test shardingsphere encryption module','2023-05-10 15:26:33','2023-05-10 16:02:13'),(46,'assembly','2023-05-10 17:51:32','2023-09-11 12:07:40'),(52,'js types','2023-06-09 11:24:59','2023-06-09 11:39:32'),(53,'js this','2023-06-09 11:50:00','2023-06-09 12:10:56'),(55,'js closure and scope','2023-06-09 17:23:42','2023-06-09 17:57:58'),(56,'flex layout','2023-06-13 16:26:44','2023-06-13 16:27:08'),(57,'maven package issues','2023-06-13 18:00:43','2023-06-14 09:55:14'),(58,'sm2 generation','2023-07-12 18:35:00','2023-07-12 19:25:22'),(60,'java utils class','2023-09-11 16:15:00','2023-09-11 18:38:39');
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `snippets`
--

DROP TABLE IF EXISTS `snippets`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `snippets` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `code_content` text NOT NULL,
  `lang` varchar(255) NOT NULL,
  `title` varchar(255) DEFAULT NULL,
  `description` text,
  `create_time` varchar(19) NOT NULL,
  `article_id` int(11) DEFAULT NULL,
  `update_time` varchar(255) DEFAULT NULL,
  `order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=185 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `snippets`
--

LOCK TABLES `snippets` WRITE;
/*!40000 ALTER TABLE `snippets` DISABLE KEYS */;
INSERT INTO `snippets` VALUES (19,'// bash: cd: test: Permission denied\ncd test\n\n\n// if you want to get into a folder, this is the minimun requirement\nchmod **1 test\n\n// if you want to ls a folder, this is the minimum requirement\nchmod **5 test\n\n// if you want to create/remove/rename files in a folder, this is the minimum requirement\nchmod **3 test\n\n','javascript','\"x\" permission for folder in linux','<p>When I try to create a file in a directory, I was blocked outside the folder with \"bash: cd: test: Permission denied\".</p>\n<p>The permission of the folder is 654, and I am not the owner or in the owner group, but I thought \"4\" means I have the read permission of the folder, which means that I could get into the folder, but I was wrong.</p>\n<p>permission \"x\" has different meanings for regular files and folders.</p>\n<ul>\n<li>For regular file: \"x\" means you can run it, for example you can not run a shell script if \"x\" permission is 0</li>\n<li>For folder file: \"x\" means you can get content of it, without \"x\" permission, you can do the following to a folder:<br />\n<ul>\n<li>get into a folder</li>\n<li>read file entries from a folder using ls</li>\n<li>create a file in a folder</li>\n</ul>\n</li>\n</ul>','2023-04-28 10:06:12',0,NULL,0),(20,'// get the pid\nsudo lsof -i:port\n\nkill pid','java','inspect port in use','<p>Note that lsof must be executed in <strong>sudo</strong>.</p>','2023-04-28 15:50:19',0,NULL,0),(21,'import org.slf4j.Logger\nimport org.slf4j.LoggerFactory\n\nabstract class Log {\n    val log: Logger = LoggerFactory.getLogger(this.javaClass)\n}','kotlin','Log class for quick logger in kotlin','','2023-04-28 16:23:04',0,NULL,0),(22,'// dependency\n\n<!-- logger -->\n<dependency>\n    <groupId>io.github.microutils</groupId>\n    <artifactId>kotlin-logging-jvm</artifactId>\n    <version>3.0.5</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-slf4j-impl</artifactId>\n    <version>2.14.1</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-core</artifactId>\n    <version>2.14.1</version>\n</dependency>\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-api</artifactId>\n    <version>1.7.32</version>\n</dependency>\n\n\n// get start\n\nprivate val log = KotlinLogging.logger {}\n\nlog.debug{\"hello\"}','kotlin','kotlin logger utility','','2023-05-05 14:44:00',0,NULL,0),(24,'// ResponseWrapperAdvice.kt\ninterface RespBodyWrapper {\n\n    fun wrap(body: Any?): Any\n\n    fun need2Wrap(returnType: MethodParameter): Boolean\n}\n\n@Component\nclass JsonResultRespBodyWrapper : RespBodyWrapper {\n    override fun wrap(body: Any?): Any {\n        return JsonResult.ok(body)\n    }\n\n    override fun need2Wrap(returnType: MethodParameter): Boolean {\n        return returnType.parameterType != JsonResult::class.java\n    }\n}\n\n@ControllerAdvice\nclass ResponseWrapperAdvice : ResponseBodyAdvice<Any?> {\n\n    @Autowired\n    @Qualifier(\"jsonResultRespBodyWrapper\")\n    lateinit var respWrapper: RespBodyWrapper\n\n    override fun supports(\n        returnType: org.springframework.core.MethodParameter,\n        converterType: Class<out HttpMessageConverter<*>>,\n    ): Boolean {\n        return true // Return true to enable the advice for all controller methods\n    }\n\n    override fun beforeBodyWrite(\n        @Nullable body: Any?,\n        returnType: MethodParameter,\n        selectedContentType: MediaType,\n        selectedConverterType: Class<out HttpMessageConverter<*>>,\n        request: ServerHttpRequest,\n        response: ServerHttpResponse,\n    ): Any? {\n        if (respWrapper.need2Wrap(returnType)) {\n            return respWrapper.wrap(body)\n        }\n        return body\n    }\n}\n\n\n\n// controller\n\n    @GetMapping(\"/download\")\n    fun downloadFile(): StreamingResponseBody {\n        val file = File(\"pom.xml\")\n        val inputStream = FileInputStream(file)\n\n        val responseBody = StreamingResponseBody { outputStream ->\n            val buffer = ByteArray(1024)\n            var bytesRead: Int\n            while (inputStream.read(buffer).also { bytesRead = it } != -1) {\n                outputStream.write(buffer, 0, bytesRead)\n            }\n            inputStream.close()\n            outputStream.flush()\n        }\n\n        val headers = HttpHeaders()\n        headers.set(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=${file.name}\")\n        headers.set(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_OCTET_STREAM_VALUE)\n        headers.set(HttpHeaders.CONTENT_LENGTH, file.length().toString())\n\n        return responseBody\n    }\n\n    @GetMapping(\"/test\")\n    fun test() {\n        println(\"hello\")\n    }\n\n    @GetMapping(\"/test1\")\n    fun test1(): Any? {\n        return object {\n            var name: String = \"hello\"\n        }\n    }','kotlin','wrap spring mvc return type','<h1>Modify body</h1>\n<p>We use spring <strong>ResponseBodyAdvice</strong> to modify the response body in the case of responsebody mode.</p>\n<blockquote>\n<p>Implementations may be registered directly with RequestMappingHandlerAdapter and ExceptionHandlerExceptionResolver or more likely annotated with @ControllerAdvice in which case they will be auto-detected by both.</p>\n</blockquote>\n<p>Note that return body from <strong>GlobalExceptionHandlers</strong> and <strong>Controllers</strong> will all be handled by <strong>ResponseBodyAdvice</strong>.</p>\n<h1>Different types of return type</h1>\n<p>There are general 2 types of return value, <strong>object</strong>(or primitive) and streaming file, for formar, we want to return directly from controller, for latter, we don\'t want to interfer with it.</p>\n<p>For single object, we return it directly from controller to let the body be processed by <strong>ResponseBodyAdvice</strong>.</p>\n<p>For file, we return it using <strong>StreamingResponseBody</strong> or ResponseEntity&lt;StreamingResponseBody&gt; to <strong>passby</strong> ResponseBodyAdvice.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>','2023-05-06 10:04:43',NULL,NULL,0),(28,'// GlobalExceptionHandler.kt\nclass BackendException : RuntimeException {\n    val data: Any?\n    val code: String?\n    val msg: String?\n\n    constructor(data: Any?, code: String, msg: String) : super(code) {\n        this.data = data\n        this.code = code\n        this.msg = msg\n    }\n\n    constructor(data: Any?, respCode: RespCode) : super(respCode.msg) {\n        this.data = data\n        this.code = respCode.name\n        this.msg = respCode.msg\n    }\n\n}\n\n@ControllerAdvice\nclass GlobalExceptionHandler {\n\n    private val log = KotlinLogging.logger {}\n\n    @ExceptionHandler(BackendException::class)\n    @ResponseBody\n    fun errorCodeException(req: HttpServletResponse, ex: BackendException): JsonResult {\n        var msg = ex.msg\n\n        val jsonResult = JsonResult()\n        jsonResult.data = ex.data\n        jsonResult.code = ex.code\n        jsonResult.msg = msg\n        log.error(\"[{}] {}\", ex.code, msg)\n        return jsonResult\n    }\n\n    //  handle object validations\n    @ExceptionHandler(BindException::class, MethodArgumentNotValidException::class)\n    @ResponseBody\n    fun paramValidateException(ex: Exception): JsonResult {\n        var bindingResult: BindingResult? = null\n        try {\n            bindingResult = ClassUtils.getFieldValue(ex, \"bindingResult\", BindingResult::class.java)\n        } catch (e: NoSuchFieldException) {\n            return JsonResult.of(null, RespCode.FRONT_END_PARAMS_ERROR)\n        }\n        val parameterCheckResult = bindingResultPackager(bindingResult)\n        val jsonResult = JsonResult.of(\n            parameterCheckResult,\n            RespCode.FRONT_END_PARAMS_ERROR.name,\n            RespCode.FRONT_END_PARAMS_ERROR.msg\n        )\n        log.error(\"Error:{}\", jsonResult)\n        return jsonResult\n    }\n\n    // handle primitive validations\n    @ExceptionHandler(ConstraintViolationException::class)\n    @ResponseBody\n    fun constraintViolationException(ex: ConstraintViolationException): JsonResult {\n        val constraintViolations = ex.constraintViolations\n        val parameterCheckResult = ParameterCheckResult()\n        for (constraintViolation in constraintViolations) {\n            parameterCheckResult.putResult(\n                getLastPathNode(constraintViolation.propertyPath),\n                constraintViolation.message\n            )\n        }\n\n        return JsonResult.of(\n            parameterCheckResult,\n            RespCode.FRONT_END_PARAMS_ERROR.name,\n            RespCode.FRONT_END_PARAMS_ERROR.msg\n        )\n    }\n\n    private fun getLastPathNode(path: javax.validation.Path): String {\n        val wholePath = path.toString()\n        val i = wholePath.lastIndexOf(\".\")\n        return if (i != -1) {\n            val substring = wholePath.substring(i + 1, wholePath.length)\n            substring\n        } else {\n            wholePath\n        }\n    }\n\n    private fun bindingResultPackager(bindingResult: BindingResult): ParameterCheckResult {\n        val parameterCheckResult = ParameterCheckResult()\n        for (objectError in bindingResult.allErrors) {\n            val fieldError = objectError as FieldError\n            parameterCheckResult.putResult(fieldError.field, fieldError.defaultMessage ?: \"\")\n        }\n        return parameterCheckResult\n    }\n\n    /**\n     * handle other exceptions\n     */\n    @ExceptionHandler(Exception::class)\n    @ResponseBody\n    fun otherException(req: HttpServletResponse, ex: Exception): JsonResult {\n        log.error(\"Server Exception-Name:{}，Server Exception-Msg:{}\", ex.javaClass.typeName, ex.message)\n        if (ex is HttpMessageNotReadableException || ex is MissingServletRequestParameterException) {\n            return errorCodeException(req, BackendException(null, RespCode.FRONT_END_PARAMS_ERROR))\n        }\n        if (ex is MaxUploadSizeExceededException) {\n            return errorCodeException(req, BackendException(null, RespCode.UPLOAD_FILE_SIZE_EXCEED_UPPER_LIMIT))\n        }\n        if (ex is MultipartException) {\n            val rootCause = ExceptionUtils.getRootCause(ex)\n            if (rootCause is FileUploadBase.IOFileUploadException) {\n                return errorCodeException(req, BackendException(null, RespCode.UPLOAD_FILE_UNKNOWN_ERROR))\n            } else if (ex.message?.contains(\"not a multipart request\") == true) {\n                return errorCodeException(req, BackendException(null, RespCode.UPLOAD_FILE_MISSING))\n            }\n        }\n        val jsonResult = JsonResult()\n        jsonResult.data = null\n        jsonResult.code = RespCode.OTHER_ERROR.name\n        jsonResult.msg =\n            \"Server internal error occurred --> [ \" + ex.javaClass.typeName + \"-->\" + ex.message + \" ]\"\n        return jsonResult\n    }\n\n}\n\n\nclass ParameterCheckResult {\n\n    private var paramCheckMap = JSONObject()\n\n    fun putResult(field: String, message: String) {\n        paramCheckMap[field] = message\n    }\n\n    override fun toString(): String {\n        return \"ParameterCheckResult(paramCheckMap=$paramCheckMap)\"\n    }\n\n}\n\n// RespCode.kt\nenum class RespCode(var msg: String) {\n\n    SUCCESS(\"success\"),\n    FRONT_END_PARAMS_ERROR(\"front end params error\"),\n    UPLOAD_FILE_SIZE_EXCEED_UPPER_LIMIT(\"upload file size exceed upper limit\"),\n    UPLOAD_FILE_UNKNOWN_ERROR(\"upload file unknown error\"),\n    UPLOAD_FILE_MISSING(\"upload file missing\"),\n    OTHER_ERROR(\"other error\"),\n    NO_SNIPPET(\"no snippet\"),\n    ;\n}\n\nfun JsonResult.Companion.of(data: Any?, respCode: RespCode): JsonResult {\n    return JsonResult(data, respCode.name, respCode.msg)\n}\n\n// JsonResult.kt\ndata class JsonResult(\n    var data: Any?,\n    var code: String?,\n    var msg: String?\n) {\n\n    constructor() : this(null, null, null)\n\n    companion object {\n\n        fun of(data: Any?, code: String, msg: String): JsonResult {\n            return JsonResult(data, code, msg)\n        }\n\n        fun ok(): JsonResult {\n            return JsonResult(null, RespCode.SUCCESS.name, RespCode.SUCCESS.msg)\n        }\n\n        fun ok(data: Any?): JsonResult {\n            return JsonResult(data, RespCode.SUCCESS.name, RespCode.SUCCESS.msg)\n        }\n    }\n\n\n}','kotlin','spring mvc exception handle','','2023-05-06 10:53:41',NULL,NULL,0),(29,'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>2.2.1.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n \n	<groupId>${group id}</groupId>\n	<artifactId>${artifact id}</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<name>${projectname}</name>\n\n    <properties>\n		<maven.compiler.source>1.8</maven.compiler.source>\n		<maven.compiler.target>1.8</maven.compiler.target>\n		<kotlin.version>1.7.22</kotlin.version>\n	</properties>\n	<dependencies>\n		<dependency>\n			<groupId>com.fasterxml.jackson.module</groupId>\n			<artifactId>jackson-module-kotlin</artifactId>\n			<version>2.10.0</version>\n		</dependency>\n		<dependency>\n			<groupId>org.jetbrains.kotlin</groupId>\n			<artifactId>kotlin-reflect</artifactId>\n			<version>${kotlin.version}</version>\n		</dependency>\n		<dependency>\n			<groupId>org.jetbrains.kotlin</groupId>\n			<artifactId>kotlin-stdlib-jdk8</artifactId>\n			<version>${kotlin.version}</version>\n		</dependency>\n		<dependency>\n			<groupId>org.jetbrains.kotlin</groupId>\n			<artifactId>kotlin-reflect</artifactId>\n			<version>${kotlin.version}</version>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter</artifactId>\n		</dependency>\n		<dependency>\n			<groupId>org.jetbrains.kotlin</groupId>\n			<artifactId>kotlin-reflect</artifactId>\n		</dependency>\n		<dependency>\n			<groupId>org.jetbrains.kotlin</groupId>\n			<artifactId>kotlin-stdlib-jdk8</artifactId>\n		</dependency>\n \n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n	</dependencies>\n \n	<build>\n		<sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>\n		<testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n			<plugin>\n				<groupId>org.jetbrains.kotlin</groupId>\n				<artifactId>kotlin-maven-plugin</artifactId>\n				<configuration>\n					<args>\n						<arg>-Xjsr305=strict</arg>\n					</args>\n					<compilerPlugins>\n						<plugin>spring</plugin>\n					</compilerPlugins>\n				</configuration>\n				<dependencies>\n					<dependency>\n						<groupId>org.jetbrains.kotlin</groupId>\n						<artifactId>kotlin-maven-allopen</artifactId>\n						<version>${kotlin.version}</version>\n					</dependency>\n				</dependencies>\n			</plugin>\n			<plugin>\n				<groupId>org.apache.maven.plugins</groupId>\n				<artifactId>maven-compiler-plugin</artifactId>\n				<version>3.5.1</version>\n				<executions>\n					<!-- Replacing default-compile as it is treated specially by maven -->\n					<execution>\n						<id>default-compile</id>\n						<phase>none</phase>\n					</execution>\n					<!-- Replacing default-testCompile as it is treated specially by maven -->\n					<execution>\n						<id>default-testCompile</id>\n						<phase>none</phase>\n					</execution>\n					<execution>\n						<id>java-compile</id>\n						<phase>compile</phase>\n						<goals>\n							<goal>compile</goal>\n						</goals>\n					</execution>\n					<execution>\n						<id>java-test-compile</id>\n						<phase>test-compile</phase>\n						<goals>\n							<goal>testCompile</goal>\n						</goals>\n					</execution>\n				</executions>\n			</plugin>\n \n		</plugins>\n	</build>\n \n</project>','html',' minimun requirement for creating a new springboot with kotlin','','2023-05-06 14:09:46',NULL,NULL,0),(49,'package fit.wenchao.spidemo\n\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\nimport java.util.*\n\n@SpringBootApplication\nclass SpiDemoApplication\n\nfun main(args: Array<String>) {\n    runApplication<SpiDemoApplication>(*args)\n    \n    // get all from impls of a specific interface\n    val loader = ServiceLoader.load(MessageService::class.java)\n    for (service in loader) {\n        service.sendMessage(\"Hello, world!\")\n    }\n}\n\n// Interface\ninterface MessageService {\n    fun sendMessage(message: String)\n}\n\n// Email impl\nclass EmailMessageService : MessageService {\n    override fun sendMessage(message: String) {\n        // code to send message via email\n        println(\"email ${message}\")\n    }\n}\n\n// SMS impl\nclass SMSMessageService : MessageService {\n    override fun sendMessage(message: String) {\n        // code to send message via SMS\n        println(\"sms ${message}\")\n    }\n}','kotlin','java spi demo','<p>By spi, we can expand our application without modify the original code by providing addtional implementations and a file including a list of those impls. Spi takes full advantages of the concept of <strong>interface</strong> and follows the design pattern of \"<strong>open-closed</strong>\".</p>\n<p>What we need to build a spi demo:</p>\n<ul>\n<li>code against interface: use <strong>java.util.ServiceLoader </strong>to load all impls of a specific interface through spi machenism and code with interface instead of concrete impls</li>\n<li>provide impls: provide impls with a list of them, for the example provided in the snippet, we should put a file named \"fit.wenchao.spidemo.MessageService\" to \"<strong>src/main/resources/META-INF/services</strong>\", which contains 2 lines:\n<div><strong>fit.wenchao.spidemo.EmailMessageService</strong><br /><strong>fit.wenchao.spidemo.SMSMessageService</strong></div>\n</li>\n</ul>\n<p>What we can do to achieve the goal that the same as spi but without using it? May be we can scan the classpath and iterate through all classes and check if any of them implements a specific interface. A similar example can be spring @Component machenism.</p>\n<p>But why not use the feature java introduced itself(since java 6), especially if you don\'t want to other features like DI or AOP, spi can be a light-weight choise.</p>','2023-05-06 14:42:15',NULL,NULL,0),(50,'1','kotlin',NULL,'<p>remote encryption</p>\n<table>\n<thead>\n<tr>\n<th>Group</th>\n<th>10 records</th>\n<th>100 records</th>\n<th>1,000 records</th>\n<th>10,000 records</th>\n<th>100,000 records</th>\n<th>500,000 records</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Encrypt 1 field</td>\n<td>-0.20%</td>\n<td>75.49%</td>\n<td>107.97%</td>\n<td>128.15%</td>\n<td>126.93%</td>\n<td>126.68%</td>\n</tr>\n<tr>\n<td>Encrypt 2 fields</td>\n<td>-4.71%</td>\n<td>175.21%</td>\n<td>224.93%</td>\n<td>250.57%</td>\n<td>251.62%</td>\n<td>252.67%</td>\n</tr>\n<tr>\n<td>Encrypt 3 fields</td>\n<td>24.78%</td>\n<td>270.45%</td>\n<td>331.98%</td>\n<td>375.18%</td>\n<td>368.41%</td>\n<td>369.16%</td>\n</tr>\n</tbody>\n</table>','2023-05-08 09:16:15',2,'2023-09-12 16:24:13',0),(54,'// get the pid\nsudo lsof -i:port\n\nkill pid','python',NULL,'<p>Note that lsof must be executed in <strong>sudo</strong>.</p>','2023-05-08 09:16:18',4,'2023-05-10 09:17:05',0),(55,'console.log(\'Hello, world!\');','javascript',NULL,'A simple JavaScript program','2023-05-08 09:16:18',4,'2023-05-10 09:17:05',1),(58,'// ResponseWrapperAdvice.kt\ninterface RespBodyWrapper {\n\n    fun wrap(body: Any?): Any\n\n    fun need2Wrap(returnType: MethodParameter): Boolean\n}\n\n@Component\nclass JsonResultRespBodyWrapper : RespBodyWrapper {\n    override fun wrap(body: Any?): Any {\n        return JsonResult.ok(body)\n    }\n\n    override fun need2Wrap(returnType: MethodParameter): Boolean {\n        return returnType.parameterType != JsonResult::class.java\n    }\n}\n\n@ControllerAdvice\nclass ResponseWrapperAdvice : ResponseBodyAdvice<Any?> {\n\n    @Autowired\n    @Qualifier(\"jsonResultRespBodyWrapper\")\n    lateinit var respWrapper: RespBodyWrapper\n\n    override fun supports(\n        returnType: org.springframework.core.MethodParameter,\n        converterType: Class<out HttpMessageConverter<*>>,\n    ): Boolean {\n        return true // Return true to enable the advice for all controller methods\n    }\n\n    override fun beforeBodyWrite(\n        @Nullable body: Any?,\n        returnType: MethodParameter,\n        selectedContentType: MediaType,\n        selectedConverterType: Class<out HttpMessageConverter<*>>,\n        request: ServerHttpRequest,\n        response: ServerHttpResponse,\n    ): Any? {\n        // we handle string return type rather then let springboot taking over, because we want to wrap the string with json result\n        // in which case the selected converter for string is StringHttpMessageConverter, which can not do the job MappingJackson2HttpMessageConverter can do\n        if(selectedConverterType == StringHttpMessageConverter::class.java) {\n            return JSONObject.toJSONString(respWrapper.wrap(body))\n        }\n        if (respWrapper.need2Wrap(returnType)) {\n            return respWrapper.wrap(body)\n        }\n        return body\n    }\n}\n','kotlin',NULL,'<h1>Modify body</h1>\n<p>We use spring <strong>ResponseBodyAdvice</strong> to modify the response body in the case of responsebody mode.</p>\n<blockquote>\n<p>Implementations may be registered directly with RequestMappingHandlerAdapter and ExceptionHandlerExceptionResolver or more likely annotated with @ControllerAdvice in which case they will be auto-detected by both.</p>\n</blockquote>\n<p>Note that return body from <strong>GlobalExceptionHandlers</strong> and <strong>Controllers</strong> will all be handled by <strong>ResponseBodyAdvice</strong>.</p>\n<h1>Different types of return type</h1>\n<p>There are general 2 types of return value, <strong>object</strong>(or primitive) and streaming file, for formar, we want to return directly from controller, for latter, we don\'t want to interfer with it.</p>\n<p>For single object, we return it directly from controller to let the body be processed by <strong>ResponseBodyAdvice</strong>.</p>\n<p>For file, we return it using <strong>StreamingResponseBody</strong> or ResponseEntity&lt;StreamingResponseBody&gt; to <strong>passby</strong> ResponseBodyAdvice.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>','2023-05-08 09:16:19',6,'2023-05-23 16:04:43',0),(60,'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>2.2.1.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n \n	<groupId>${group id}</groupId>\n	<artifactId>${artifact id}</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<name>${projectname}</name>\n\n    <properties>\n		<maven.compiler.source>1.8</maven.compiler.source>\n		<maven.compiler.target>1.8</maven.compiler.target>\n		<kotlin.version>1.7.22</kotlin.version>\n	</properties>\n	<dependencies>\n        <dependency>\n            <groupId>com.fasterxml.jackson.module</groupId>\n            <artifactId>jackson-module-kotlin</artifactId>\n            <version>2.10.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-reflect</artifactId>\n            <version>${kotlin.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-stdlib-jdk8</artifactId>\n            <version>${kotlin.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n \n	<build>\n		<sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>\n		<testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n			<plugin>\n				<groupId>org.jetbrains.kotlin</groupId>\n				<artifactId>kotlin-maven-plugin</artifactId>\n				<configuration>\n					<args>\n						<arg>-Xjsr305=strict</arg>\n					</args>\n					<compilerPlugins>\n						<plugin>spring</plugin>\n					</compilerPlugins>\n				</configuration>\n				<dependencies>\n					<dependency>\n						<groupId>org.jetbrains.kotlin</groupId>\n						<artifactId>kotlin-maven-allopen</artifactId>\n						<version>${kotlin.version}</version>\n					</dependency>\n				</dependencies>\n			</plugin>\n			<plugin>\n				<groupId>org.apache.maven.plugins</groupId>\n				<artifactId>maven-compiler-plugin</artifactId>\n				<version>3.5.1</version>\n				<executions>\n					<!-- Replacing default-compile as it is treated specially by maven -->\n					<execution>\n						<id>default-compile</id>\n						<phase>none</phase>\n					</execution>\n					<!-- Replacing default-testCompile as it is treated specially by maven -->\n					<execution>\n						<id>default-testCompile</id>\n						<phase>none</phase>\n					</execution>\n					<execution>\n						<id>java-compile</id>\n						<phase>compile</phase>\n						<goals>\n							<goal>compile</goal>\n						</goals>\n					</execution>\n					<execution>\n						<id>java-test-compile</id>\n						<phase>test-compile</phase>\n						<goals>\n							<goal>testCompile</goal>\n						</goals>\n					</execution>\n				</executions>\n			</plugin>\n \n		</plugins>\n	</build>\n \n</project>','html',NULL,'<p>for springboot</p>','2023-05-08 09:16:20',7,'2023-07-05 14:39:17',1),(62,'package fit.wenchao.spidemo\n\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\nimport java.util.*\n\n@SpringBootApplication\nclass SpiDemoApplication\n\nfun main(args: Array<String>) {\n    runApplication<SpiDemoApplication>(*args)\n    \n    // get all from impls of a specific interface\n    val loader = ServiceLoader.load(MessageService::class.java)\n    for (service in loader) {\n        service.sendMessage(\"Hello, world!\")\n    }\n}\n\n// Interface\ninterface MessageService {\n    fun sendMessage(message: String)\n}\n\n// Email impl\nclass EmailMessageService : MessageService {\n    override fun sendMessage(message: String) {\n        // code to send message via email\n        println(\"email ${message}\")\n    }\n}\n\n// SMS impl\nclass SMSMessageService : MessageService {\n    override fun sendMessage(message: String) {\n        // code to send message via SMS\n        println(\"sms ${message}\")\n    }\n}','kotlin',NULL,'<p>By spi, we can expand our application without modify the original code by providing addtional implementations and a file including a list of those impls. Spi takes full advantages of the concept of <strong>interface</strong> and follows the design pattern of \"<strong>open-closed</strong>\".</p>\n<p>What we need to build a spi demo:</p>\n<ul>\n<li>code against interface: use <strong>java.util.ServiceLoader </strong>to load all impls of a specific interface through spi machenism and code with interface instead of concrete impls</li>\n<li>provide impls: provide impls with a list of them, for the example provided in the snippet, we should put a file named \"fit.wenchao.spidemo.MessageService\" to \"<strong>src/main/resources/META-INF/services</strong>\", which contains 2 lines:\n<div><strong>fit.wenchao.spidemo.EmailMessageService</strong><br /><strong>fit.wenchao.spidemo.SMSMessageService</strong></div>\n</li>\n</ul>\n<p>What we can do to achieve the goal that the same as spi but without using it? May be we can scan the classpath and iterate through all classes and check if any of them implements a specific interface. A similar example can be spring @Component machenism.</p>\n<p>But why not use the feature java introduced itself(since java 6), especially if you don\'t want to other features like DI or AOP, spi can be a light-weight choise.</p>','2023-05-08 09:16:20',8,'2023-05-10 09:15:25',0),(147,'// bash: cd: test: Permission denied\ncd test\n\n\n// if you want to get into a folder, this is the minimun requirement\nchmod **1 test\n\n// if you want to ls a folder, this is the minimum requirement\nchmod **5 test\n\n// if you want to create/remove/rename files in a folder, this is the minimum requirement\nchmod **3 test\n\n','kotlin',NULL,'<p>When I try to create a file in a directory, I was blocked outside the folder with \"bash: cd: test: Permission denied\".</p>\n<p>The permission of the folder is 654, and I am not the owner or in the owner group, but I thought \"4\" means I have the read permission of the folder, which means that I could get into the folder, but I was wrong.</p>\n<p>permission \"x\" has different meanings for regular files and folders.</p>\n<ul>\n<li>For regular file: \"x\" means you can run it, for example you can not run a shell script if \"x\" permission is 0</li>\n<li>For folder file: \"x\" means you can get content of it, without \"x\" permission, you can do the following to a folder:<br />\n<ul>\n<li>get into a folder</li>\n<li>read file entries from a folder using ls</li>\n<li>create a file in a folder</li>\n</ul>\n</li>\n</ul>','2023-05-10 09:10:04',3,'2023-05-10 09:10:31',0),(148,'<!-- logger -->\n<dependency>\n    <groupId>io.github.microutils</groupId>\n    <artifactId>kotlin-logging-jvm</artifactId>\n    <version>3.0.5</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-slf4j-impl</artifactId>\n    <version>2.14.1</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-core</artifactId>\n    <version>2.14.1</version>\n</dependency>\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-api</artifactId>\n    <version>1.7.32</version>\n</dependency>','html',NULL,'','2023-05-10 09:11:43',5,'2023-05-10 18:11:49',1),(149,'// get start\n\nprivate val log = KotlinLogging.logger {}\n\nlog.debug{\"hello\"}','kotlin',NULL,'','2023-05-10 09:12:07',5,'2023-05-10 18:11:49',2),(150,'// controller\n\n@GetMapping(\"/download\")\nfun downloadFile(): StreamingResponseBody {\n    val file = File(\"pom.xml\")\n    val inputStream = FileInputStream(file)\n\n    val responseBody = StreamingResponseBody { outputStream ->\n        val buffer = ByteArray(1024)\n        var bytesRead: Int\n        while (inputStream.read(buffer).also { bytesRead = it } != -1) {\n            outputStream.write(buffer, 0, bytesRead)\n        }\n        inputStream.close()\n        outputStream.flush()\n    }\n\n    val headers = HttpHeaders()\n    headers.set(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=${file.name}\")\n    headers.set(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_OCTET_STREAM_VALUE)\n    headers.set(HttpHeaders.CONTENT_LENGTH, file.length().toString())\n\n    return responseBody\n}\n\n@GetMapping(\"/test\")\nfun test() {\n    println(\"hello\")\n}\n\n@GetMapping(\"/test1\")\nfun test1(): Any? {\n    return object {\n        var name: String = \"hello\"\n    }\n}','kotlin',NULL,'<h1>Examples</h1>\n<p>Different return type demonstration.</p>','2023-05-10 09:13:43',6,'2023-05-23 16:04:43',2),(151,'','kotlin',NULL,'<p>=============================================== round 0 ===============================================<br />compare group <br />insert 10 records Elapsed time: 0.053025 seconds<br />insert 100 records Elapsed time: 0.110461 seconds<br />insert 1000 records Elapsed time: 0.689666 seconds<br />insert 10000 records Elapsed time: 5.734951 seconds<br />insert 100000 records Elapsed time: 56.029116 seconds<br />1 field encryption group <br />insert 10 records [INFO] use internal runtime library<br />Elapsed time: 0.277485 seconds<br />insert 100 records Elapsed time: 0.195724 seconds<br />insert 1000 records Elapsed time: 1.729373 seconds<br />insert 10000 records Elapsed time: 15.695659 seconds<br />insert 100000 records Elapsed time: 165.186768 seconds<br />2 field encryption group <br />insert 10 records Elapsed time: 0.025099 seconds<br />insert 100 records Elapsed time: 0.224725 seconds<br />insert 1000 records Elapsed time: 2.272426 seconds<br />insert 10000 records Elapsed time: 23.213054 seconds<br />insert 100000 records Elapsed time: 233.145976 seconds<br />3 field encryption group <br />insert 10 records Elapsed time: 0.039006 seconds<br />insert 100 records Elapsed time: 0.333437 seconds<br />insert 1000 records Elapsed time: 2.833203 seconds<br />insert 10000 records Elapsed time: 29.436788 seconds<br />insert 100000 records Elapsed time: 298.437325 seconds</p>\n<p>=============================================== round 1 ===============================================<br />compare group <br />insert 10 records Elapsed time: 0.006044 seconds<br />insert 100 records Elapsed time: 0.053670 seconds<br />insert 1000 records Elapsed time: 0.582352 seconds<br />insert 10000 records Elapsed time: 6.001943 seconds<br />insert 100000 records Elapsed time: 60.277293 seconds<br />1 field encryption group <br />insert 10 records Elapsed time: 0.015369 seconds<br />insert 100 records Elapsed time: 0.181941 seconds<br />insert 1000 records Elapsed time: 1.597582 seconds<br />insert 10000 records Elapsed time: 16.525824 seconds<br />insert 100000 records Elapsed time: 167.388861 seconds<br />2 field encryption group <br />insert 10 records Elapsed time: 0.024090 seconds<br />insert 100 records Elapsed time: 0.206979 seconds<br />insert 1000 records Elapsed time: 2.455982 seconds<br />insert 10000 records Elapsed time: 26.625899 seconds<br />insert 100000 records Elapsed time: 239.138398 seconds<br />3 field encryption group <br />insert 10 records Elapsed time: 0.028793 seconds<br />insert 100 records Elapsed time: 0.278902 seconds<br />insert 1000 records Elapsed time: 3.153177 seconds<br />insert 10000 records Elapsed time: 30.052827 seconds<br />insert 100000 records Elapsed time: 322.406092 seconds</p>\n<p>=============================================== round 2 ===============================================<br />compare group <br />insert 10 records Elapsed time: 0.009152 seconds<br />insert 100 records Elapsed time: 0.085652 seconds<br />insert 1000 records Elapsed time: 0.835263 seconds<br />insert 10000 records Elapsed time: 6.537110 seconds<br />insert 100000 records Elapsed time: 69.392092 seconds<br />1 field encryption group <br />insert 10 records Elapsed time: 0.021975 seconds<br />insert 100 records Elapsed time: 0.198930 seconds<br />insert 1000 records Elapsed time: 2.053672 seconds<br />insert 10000 records Elapsed time: 16.790920 seconds<br />insert 100000 records Elapsed time: 186.568645 seconds<br />2 field encryption group <br />insert 10 records Elapsed time: 0.021881 seconds<br />insert 100 records Elapsed time: 0.283783 seconds<br />insert 1000 records Elapsed time: 2.963078 seconds<br />insert 10000 records Elapsed time: 26.486319 seconds<br />insert 100000 records Elapsed time: 261.439189 seconds<br />3 field encryption group <br />insert 10 records Elapsed time: 0.030440 seconds<br />insert 100 records Elapsed time: 0.269731 seconds<br />insert 1000 records Elapsed time: 2.999134 seconds<br />insert 10000 records Elapsed time: 34.314343 seconds<br />insert 100000 records Elapsed time: 317.456258 seconds</p>','2023-05-10 15:30:56',36,'2023-05-10 16:02:13',0),(152,'','kotlin',NULL,'','2023-05-10 15:31:26',36,'2023-05-10 16:02:13',1),(153,'','kotlin',NULL,'','2023-05-10 20:58:23',3,'2023-05-10 20:58:23',1),(154,'','kotlin',NULL,'','2023-05-17 23:30:31',2,'2023-09-12 16:24:13',1),(155,'','kotlin',NULL,'','2023-05-17 23:30:36',2,'2023-09-12 16:24:13',2),(156,'enum class RespCode(var msg: String) {\n\n    SUCCESS(\"success\"),\n    ;\n}\n\ndata class JsonResult(\n    var data: Any?,\n    var code: String?,\n    var msg: String?\n) {\n\n    constructor() : this(null, null, null)\n\n    companion object {\n\n        fun of(data: Any?, code: String, msg: String): JsonResult {\n            return JsonResult(data, code, msg)\n        }\n\n        fun ok(): JsonResult {\n            return JsonResult(null, RespCode.SUCCESS.name, RespCode.SUCCESS.msg)\n        }\n\n        fun ok(data: Any?): JsonResult {\n            return JsonResult(data, RespCode.SUCCESS.name, RespCode.SUCCESS.msg)\n        }\n    }\n\n\n}','kotlin',NULL,'<h1>JsonResult</h1>\n<p>Wrapper for return value</p>','2023-05-23 16:01:38',6,'2023-05-23 16:04:43',1),(157,'let aUndefined = undefined;\nlet aUndefinedAgain;\nconsole.log(aUndefinedAgain)\n\nlet aNull = null;\nconsole.log(aNull)\n\nconsole.log(aUndefined == aNull) // true\nconsole.log(aUndefined === aNull) // false\n\n','javascript',NULL,'<h1>Null and Undefined</h1>\n<p>Null and Undefined are <strong>two different types</strong> in js. That\'s why strict equality (===) results false between them.&nbsp;</p>\n<h1>Difference</h1>\n<p>Null: It expresses a lack of identification, indicating that a variable points to no object. It is often retrieved in a place where <strong>an object can be expected but no object is relevant</strong>.</p>\n<p>Undefined: A variable that has <strong>not been assigned</strong> a value is of type&nbsp;<code>undefined</code>. A function returns&nbsp;<code>undefined</code> if a <strong>value was not returned</strong>.</p>\n<h1>Ref</h1>\n<p>Null: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/nullhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined</a></p>\n<p>Undefined: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined</a></p>','2023-06-09 11:25:07',52,'2023-06-09 11:39:32',0),(158,'let aBoolean = false;\nlet aNumber = 1;\nlet aString = \"\";\nlet aFunction = () => {\n  console.log(\"hello\");\n};\n','javascript',NULL,'<h1>Normal Types</h1>\n<p>ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof</p>\n<p>type -&gt; name</p>\n<p>Boolean -&gt; boolean</p>\n<p>Number -&gt; number</p>\n<p>String -&gt; string</p>\n<p>Function -&gt; function&nbsp;</p>','2023-06-09 11:27:54',52,'2023-06-09 11:39:32',1),(159,'let anObject = {\n    name = \"\"\n}\n\nconsole.log(anObject)','javascript',NULL,'<h1>Object</h1>\n<p>Any other object that is not of type above is object.</p>','2023-06-09 11:37:11',52,'2023-06-09 11:39:32',2),(160,'let func = function() {\n    return this\n}\n\nconst object= {\n  prop: 42,\n  func: func\n};\n\nconsole.log(func());//[object Window]\n\nconsole.log(object.func());\n// Object { prop: 42, func: function() {\n//     return this\n// } }\n\n\n\n\n','javascript',NULL,'<h1>Function Context</h1>\n<p>For a typical function, the value of&nbsp;<code>this</code>&nbsp;is<strong> the object that the function is accessed on</strong>. In other words, if the function call is in the form&nbsp;<code>obj.f()</code>, then&nbsp;<code>this</code>&nbsp;refers to&nbsp;<code>obj</code>.&nbsp;</p>\n<p>If a function is invoked directly, the caller is evaluated as <strong>global object(not in strict mode)</strong></p>\n<p><strong>Again,</strong> the value of&nbsp;<code>this</code>&nbsp;is not the object that has the function as an own property, but <strong>the object that is used to call the function.</strong></p>','2023-06-09 11:50:07',53,'2023-06-09 12:10:56',0),(161,'// Top-level \'this\' is bound to \'globalThis\' in scripts.\nthis.x = 9;\nconst module = {\n  x: 81,\n  getX() {\n    return this.x;\n  },\n};\n\n// The \'this\' parameter of \'getX\' is bound to \'module\'.\nconsole.log(module.getX()); // 81\n\nconst retrieveX = module.getX;\n// The \'this\' parameter of \'retrieveX\' is bound to \'globalThis\' in non-strict mode.\nconsole.log(retrieveX()); // 9\n\n// Create a new function \'boundGetX\' with the \'this\' parameter bound to \'module\'.\nconst boundGetX = retrieveX.bind(module);\nconsole.log(boundGetX()); // 81','javascript',NULL,'<h1>Bind</h1>\n<pre class=\"brush: js notranslate\"><code><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* &hellip;, */</span> argN<span class=\"token punctuation\">)</span></code></pre>\n<p>The simplest use of&nbsp;<code>bind()</code>&nbsp;is to make a function that, no matter how it is called, is called with a particular&nbsp;<code>this</code>&nbsp;value.</p>\n<p>A common mistake for new JavaScript programmers is to extract a method from an object, then to later call that function and expect it to use the original object as its&nbsp;<code>this</code>&nbsp;(e.g., by using the method in callback-based code).</p>\n<p>Without special care, however, the original object is usually lost.&nbsp;</p>\n<p>&nbsp;</p>','2023-06-09 12:02:58',53,'2023-06-09 12:10:56',2),(162,'let func = () => {\n    return this\n}\n\nconst object= {\n  prop: 42,\n  func: func\n};\n\nconsole.log(func());//[object Window]\n\nconsole.log(object.func());//[object Window]','javascript',NULL,'<h1>Arrow Function</h1>\n<p>In&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow functions</a>,&nbsp;<code>this</code>&nbsp;retains the value of the enclosing lexical context\'s&nbsp;<code>this</code>. In other words, when evaluating an arrow function\'s body, the language <strong>does not create a new&nbsp;<code>this</code> binding. It\'s the biggest difference between arrow function and normal function.</strong></p>\n<p><strong>Again, for a Function funciton, every time it\'s invoked, js will create a new this based on how it\'s called, for an arrow function, \"this\" parameter is fixed when it\'s created and will be never changed after that, even if bind is applied.</strong></p>','2023-06-09 12:06:20',53,'2023-06-09 12:10:56',1),(163,'const age = 12\nfunction makeFunc() {\n  const name = \"Mozilla\";\n  function displayName() {\n    console.log(name);\n  }\n  return displayName;\n}\n\nconst myFunc = makeFunc();\n// The instance of displayName maintains a reference to its lexical environment, within which the variable name exists.\n// So when myFunc is invoked, the variable name remains available for use.\nmyFunc();','javascript',NULL,'<h1>Closure Preview</h1>\n<p>A closure gives you access to an outer function\'s scope from an inner function.</p>\n<p>In JavaScript, <strong>closures are created every time a function is created</strong>, at function creation time.</p>\n<p>In the example left, the closure of function displayName was created after an instance of displayName was created which was after the makeFunc function was invoked. Even when makeFunc&nbsp; is finished, the closure of displayName still alive.</p>','2023-06-09 17:23:51',55,'2023-06-09 17:57:58',0),(164,'// Access variable outside a scope\nfunction fun() {\n    var i = 1;\n}\nconsole.log(i); // undefined\n\n// Blocks don\'t create scopes for var in js\nif (1 > 0) {\n  var x = 1;\n}\nconsole.log(x); // 1\n\n// Use let and const instead\nif (1 > 0) {\n  let x = 1;\n}\nconsole.log(x); // ReferenceError: x is not defined\n\n','javascript',NULL,'<h1>Scope</h1>\n<p>JavaScript <strong>only had two kinds of scopes</strong>:&nbsp;<em>function scope</em>&nbsp;and&nbsp;<em>global scope</em>.&nbsp;</p>\n<div>\n<div><strong>Access variable outside a scope</strong></div>\n</div>\n<p>You can not access a variable outside a scope.&nbsp;</p>\n<p><strong>Blocks don\'t create scopes for var in js, but for let and const.</strong></p>\n<p>&nbsp;</p>','2023-06-09 17:29:56',55,'2023-06-09 17:57:58',3),(165,'// associate size to function changeFontSize \nfunction makeSizer(size) {\n  return function changeFontSize() {\n    document.body.style.fontSize = `${size}px`;\n  };\n}\n\n// just like create 3 object instance \nconst size12 = makeSizer(12);\nconst size14 = makeSizer(14);\nconst size16 = makeSizer(16);\n\n// when user click, object will be invoked\ndocument.getElementById(\"size-12\").onclick = size12;\ndocument.getElementById(\"size-14\").onclick = size14;\ndocument.getElementById(\"size-16\").onclick = size16;','javascript',NULL,'<h1>Practical Closures</h1>\n<p>Closures are useful because they let you <strong>associate data (the lexical environment) with a function</strong> that operates on that data. This has obvious parallels to <strong>object-oriented programming</strong>, where objects allow you to associate data (the object\'s properties) with one or more methods.</p>','2023-06-09 17:36:36',55,'2023-06-09 17:57:58',1),(166,'const makeCounter = function () {\n  let privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n  return {\n    increment() {\n      changeBy(1);\n    },\n\n    decrement() {\n      changeBy(-1);\n    },\n\n    value() {\n      return privateCounter;\n    },\n  };\n};\n\nconst counter1 = makeCounter();\nconst counter2 = makeCounter();\n\nconsole.log(counter1.value()); // 0.\n\ncounter1.increment();\ncounter1.increment();\nconsole.log(counter1.value()); // 2.\n\ncounter1.decrement();\nconsole.log(counter1.value()); // 1.\nconsole.log(counter2.value()); // 0.\n\n// counter is a singleton\nconst counter = (function () {\n  //...\n\n  return {\n    //...\n  };\n})();\n','javascript',NULL,'<h1>Closures&nbsp;Emulating class</h1>\n<p>The changeBy function creates a closure which has access to privateCounter variable, it can not be access from outter due to the function scope, so it\'s \"private\".</p>\n<p>The increment, decrement and value can be accessed from outside because of being return out, so they are \"public\".</p>\n<p>And without doubt, variable privateCounter is \"private\" due to the scope.</p>\n<h1>Singleton</h1>\n<p>You can easily simulate singleton with closure and IIFE.</p>','2023-06-09 17:43:43',55,'2023-06-09 17:57:58',2),(167,'','kotlin',NULL,'','2023-06-13 16:27:08',56,'2023-06-13 16:27:08',0),(168,'        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.2.2</version>\n                <configuration>\n                    <archive>\n                        <manifest>\n                            <mainClass>com.ndsec.App</mainClass>\n                        </manifest>\n                    </archive>\n                </configuration>\n            </plugin>\n        <plugins>','html',NULL,'<p>for normal jave project</p>','2023-06-13 18:01:29',57,'2023-06-14 09:55:14',0),(169,'        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <mainClass>fit.wenchao.ldapauthdemo.OperatingCenterApplicationKt</mainClass>\n                </configuration>\n            </plugin>\n        <plugins>','html',NULL,'<p>for springboot</p>','2023-06-14 09:50:58',57,'2023-06-14 09:55:14',1),(170,'    <properties>\n        <java.version>1.8</java.version>\n        <kotlin.version>1.8.21</kotlin.version>\n        <main.class>com.example.demo.Demo8ApplicationKt</main.class>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-reflect</artifactId>\n            <version>${kotlin.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-stdlib</artifactId>\n            <version>${kotlin.version}</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <sourceDirectory>src/main/kotlin</sourceDirectory>\n        <testSourceDirectory>src/test/kotlin</testSourceDirectory>\n        <plugins>\n            <plugin>\n                <groupId>org.jetbrains.kotlin</groupId>\n                <artifactId>kotlin-maven-plugin</artifactId>\n                <version>${kotlin.version}</version>\n                <executions>\n                    <execution>\n                        <id>compile</id>\n                        <phase>compile</phase>\n                        <goals>\n                            <goal>compile</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>test-compile</id>\n                        <phase>test-compile</phase>\n                        <goals>\n                            <goal>test-compile</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.5.1</version>\n                <configuration>\n\n                </configuration>\n                <executions>\n                    <!-- Replacing default-compile as it is treated specially by maven -->\n                    <execution>\n                        <id>default-compile</id>\n                        <phase>none</phase>\n                    </execution>\n                    <!-- Replacing default-testCompile as it is treated specially by maven -->\n                    <execution>\n                        <id>default-testCompile</id>\n                        <phase>none</phase>\n                    </execution>\n                    <execution>\n                        <id>java-compile</id>\n                        <phase>compile</phase>\n                        <goals>\n                            <goal>compile</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>java-test-compile</id>\n                        <phase>test-compile</phase>\n                        <goals>\n                            <goal>testCompile</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-assembly-plugin</artifactId>\n                <version>2.6</version>\n                <executions>\n                    <execution>\n                        <id>make-assembly</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>single</goal>\n                        </goals>\n                        <configuration>\n                            <archive>\n                                <manifest>\n                                    <mainClass>${main.class}</mainClass>\n                                </manifest>\n                            </archive>\n                            <descriptorRefs>\n                                <descriptorRef>jar-with-dependencies</descriptorRef>\n                            </descriptorRefs>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>','html',NULL,'<p>for normal project</p>','2023-06-14 10:32:18',7,'2023-07-05 14:39:17',0),(171,'    public KeyPair generateSm2KeyPair() {\n        // Add Bouncy Castle as a security provider\n        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n\n        // Create SM2 key pair generator\n        ECKeyPairGenerator generator = new ECKeyPairGenerator();\n        ECKeyGenerationParameters keyGenParams = new ECKeyGenerationParameters(SmUtil.SM2_DOMAIN_PARAMS, null);\n        generator.init(keyGenParams);\n\n        // Generate the SM2 key pair\n        AsymmetricCipherKeyPair keyPair = generator.generateKeyPair();\n        try {\n            return convertBcToJceKeyPair(keyPair);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    // Convert the Bouncy Castle key pair to Java\'s KeyPair\n    private static KeyPair convertBcToJceKeyPair(AsymmetricCipherKeyPair bcKeyPair) throws Exception {\n        byte[] pkcs8Encoded = PrivateKeyInfoFactory.createPrivateKeyInfo(bcKeyPair.getPrivate()).getEncoded();\n        PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(pkcs8Encoded);\n        byte[] spkiEncoded = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(bcKeyPair.getPublic()).getEncoded();\n        X509EncodedKeySpec spkiKeySpec = new X509EncodedKeySpec(spkiEncoded);\n        KeyFactory keyFac = KeyFactory.getInstance(\"EC\");\n        return new KeyPair(keyFac.generatePublic(spkiKeySpec), keyFac.generatePrivate(pkcs8KeySpec));\n    }','java',NULL,'<p>Elliptic-curve cryptography</p>\n<p>to generate an ecc key pair, you need:</p>\n<p>a curve: elliptic curve, either pre-defined or custom one</p>\n<p>a g pointer: generator pointer</p>\n<p>a scalar: typically refers to a positive integer used in scalar multiplication operations on the curve. a scalar in ecc is the private key generated by key owner</p>\n<p>curve, g pointer, consists of a&nbsp;</p>\n<p>multiplication: involves multiplying a point on the elliptic curve by a scalar value. The result is another point on the curve, which consists the public key of ecc key pair</p>\n<p>domain parameter:all the elements defining the elliptic curve, including Curve,Prime Field,Base Point,Order,Cofactor</p>\n<p>&nbsp;</p>\n<p>for the conversion:</p>\n<div>\n<div>bcKeyPair.getPrivate() is a AsymmetricKeyParameter which is actually a ECPrivateKeyParameters, containing scalar and the domain parameter describing the ecc scheme</div>\n</div>\n<div>&nbsp;</div>\n<div>PrivateKeyInfo and SubjectPublicKeyInfo are all ASN1Object, which can be encoded into asn.1 format, for private key, the format is PKCS8, for public key, the default format is X509 encoding defined in rfc-2459.</div>','2023-07-12 18:35:22',58,'2023-07-12 19:25:22',0),(172,'    public X509Certificate generateX509Certificate(\n            PublicKey publicKey,\n            PrivateKey privateKey,\n            X500Name subject,\n            X500Name issuer,\n            Date startDate,\n            Date endDate\n    ) {\n        try {\n            BigInteger serial = BigInteger.valueOf(System.currentTimeMillis());\n            Date notBefore = startDate;\n            Date notAfter = endDate;\n\n            X509v3CertificateBuilder certBuilder = new JcaX509v3CertificateBuilder(issuer, serial, notBefore, notAfter, subject, publicKey);\n\n            // Sign the certificate using the private key\n            ContentSigner contentSigner = new JcaContentSignerBuilder(\"SM3WITHSM2\").setProvider(\"BC\").build(privateKey);\n            X509CertificateHolder certHolder = certBuilder.build(contentSigner);\n\n            // Convert the certificate holder to X509Certificate\n            X509Certificate cert = new JcaX509CertificateConverter().setProvider(\"BC\").getCertificate(certHolder);\n            return cert;\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to generate X509 certificate\", e);\n        }\n    }','java',NULL,'<p>cert generation</p>\n<p>certificate: public key certificate, also known as a digital certificate or identity certificate, is an electronic document used to prove the validity of a public key. <a href=\"https://en.wikipedia.org/wiki/Public_key_certificate\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Public_key_certificate</a></p>\n<p>detail specification: rfc2459 <a href=\"https://www.rfc-editor.org/rfc/rfc2459.html\" target=\"_blank\" rel=\"noopener\">https://www.rfc-editor.org/rfc/rfc2459.html</a></p>\n<p>generation overview:</p>\n<p>bind the publickey with&nbsp;the issuer, subject, expiration, structured as TBSCertificate in cert, then add some extensions, and then sign the cert with private key</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>is</p>','2023-07-12 19:05:56',58,'2023-07-12 19:25:22',1),(173,'AsymmetricCipherKeyPair keyPair = keyGen.generateKeyPair();\nECPublicKeyParameters ecPublicKeyParameters = (ECPublicKeyParameters) keyPair.getPublic();\nECPrivateKeyParameters ecPrivateKeyParameters = (ECPrivateKeyParameters) keyPair.getPrivate();\nbyte[] pubx = ecPublicKeyParameters.getQ().getAffineXCoord().getEncoded()\nbyte[] puby = ecPublicKeyParameters.getQ().getAffineYCoord().getEncoded()\nbyte[] pri = ecPrivateKeyParameters.getD().toByteArray()\n','java',NULL,'<p>get public key and private key original bytes from AsymmetricCipherKeyPair</p>\n<p>&nbsp;</p>','2023-07-12 19:14:40',58,'2023-07-12 19:25:22',3),(174,'    public static Sm2KeyPair generateKeyPair() {\n        SecureRandom random = new SecureRandom();\n        ECKeyGenerationParameters keyGenerationParams = new ECKeyGenerationParameters(DOMAIN_PARAMS, random);\n        ECKeyPairGenerator keyGen = new ECKeyPairGenerator();\n        keyGen.init(keyGenerationParams);\n        AsymmetricCipherKeyPair keyPair = keyGen.generateKeyPair();\n        ECPublicKeyParameters ecPublicKeyParameters = (ECPublicKeyParameters) keyPair.getPublic();\n        ECPrivateKeyParameters ecPrivateKeyParameters = (ECPrivateKeyParameters) keyPair.getPrivate();\n        return new Sm2KeyPair(ecPublicKeyParameters.getQ().getAffineXCoord().getEncoded(), ecPublicKeyParameters.getQ().getAffineYCoord().getEncoded(), ecPrivateKeyParameters.getD().toByteArray());\n    }\n\n        public static byte[] generateCert(byte[] privateKey, byte[] publicKey,\n                                      String issuer, String subject, long sn) {\n        try {\n\n            // construct tbs\n            ECPublicKeyParameters param =\n                    ECKeyUtil.toPublicParams(Arrays.copyOf(publicKey,32),\n                            Arrays.copyOfRange(publicKey,32,64), SmUtil.SM2_DOMAIN_PARAMS);\n            SubjectPublicKeyInfo keyInfo =\n                    SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(param);\n            Date begin = DateTime.now().toJdkDate();\n            Date end = DateTime.now().offset(DateField.YEAR, 10).toJdkDate();\n            X500Name issuerName = new X500Name(BCStyle.INSTANCE, issuer);\n            X500Name subjectName = new X500Name(BCStyle.INSTANCE, subject);\n            X509v3CertificateBuilder builder =\n                    new X509v3CertificateBuilder(issuerName,\n                            new BigInteger(String.valueOf(sn)), begin, end,\n                            subjectName, keyInfo);\n\n            // add extension\n            builder.addExtension(Extension.keyUsage,\n                    false,\n                    new KeyUsage(KeyUsage.digitalSignature +\n                            KeyUsage.nonRepudiation + KeyUsage.keyEncipherment + KeyUsage.keyAgreement));\n            builder.addExtension(MiscObjectIdentifiers.netscapeCertComment,\n                    false, new DERUTF8String(\"ccm\"));\n            builder.addExtension(Extension.basicConstraints, true,\n                    new BasicConstraints(true));\n\n            // sign\n            PrivateKey privateKeyInfo = Sm2Util.privatekey(privateKey);\n            ContentSigner contentSigner = new JcaContentSignerBuilder(\n                    \"SM3WITHSM2\").build(privateKeyInfo);\n            return builder.build(contentSigner).getEncoded();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }','java',NULL,'<p>another version of sm2 generation and cert generation</p>\n<p>the difference for sm2 generation is, the original bytes is returned but not the KeyPair.</p>\n<p>the difference for cert generation is, the publickey is from original key bytes but not the KeyPair.</p>','2023-07-12 19:18:01',58,'2023-07-12 19:25:22',4),(176,'','kotlin',NULL,'','2023-07-12 19:22:49',58,'2023-07-12 19:25:22',2),(183,'<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-assembly-plugin</artifactId>\n    <version>3.1.1</version>\n    <configuration>\n        <!-- this is the additional jar file name pattern\n            for example, test_project-1.0.0-bundled.jar\n         -->\n        <finalName>\n            ${project.artifactId}-${project.version}-bundled\n        </finalName>\n        <appendAssemblyId>false</appendAssemblyId>\n        <descriptorRefs>\n            <descriptorRef>jar-with-dependencies</descriptorRef>\n        </descriptorRefs>\n    </configuration>\n    <executions>\n        <execution>\n            <id>make-assembly</id>\n            <phase>package</phase>\n            <goals>\n                <goal>single</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>','html',NULL,'<p>You may want to reference to this: https://maven.apache.org/plugins/maven-assembly-plugin/</p>','2023-09-11 11:55:04',46,'2023-09-11 12:07:40',0),(184,'package com.example.app.utils\n\nimport java.text.ParseException\nimport java.text.SimpleDateFormat\nimport java.util.*\n\nenum class Season { SPRING, SUMMER, AUTUMN, WINTER }\n\nenum class Month { JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER }\n\nclass DateTime(private val date: Date) {\n\n    companion object {\n        fun now(): DateTime {\n            return DateTime(Date())\n        }\n\n        fun of(date: Date): DateTime {\n            return DateTime(date)\n        }\n\n        fun parse(dateTimeStr: String, pattern: String): DateTime {\n            val sdf = SimpleDateFormat(pattern, Locale.ENGLISH)\n            try {\n                val parsedDate = sdf.parse(dateTimeStr)\n                return DateTime(parsedDate)\n            } catch (e: ParseException) {\n                throw IllegalArgumentException(\"Invalid date-time format: $dateTimeStr\")\n            }\n        }\n    }\n\n    fun year(): Int {\n        val calendar = Calendar.getInstance()\n        calendar.time = date\n        return calendar.get(Calendar.YEAR)\n    }\n\n    fun seasonEnum(): Season {\n        val calendar = Calendar.getInstance()\n        calendar.time = date\n        val month = calendar.get(Calendar.MONTH)\n        return when (month) {\n            Calendar.JANUARY, Calendar.FEBRUARY, Calendar.MARCH -> Season.SPRING\n            Calendar.APRIL, Calendar.MAY, Calendar.JUNE -> Season.SUMMER\n            Calendar.JULY, Calendar.AUGUST, Calendar.SEPTEMBER -> Season.AUTUMN\n            else -> Season.WINTER\n        }\n    }\n\n    fun monthEnum(): Month {\n        val calendar = Calendar.getInstance()\n        calendar.time = date\n        val month = calendar.get(Calendar.MONTH)\n        return Month.values()[month]\n    }\n\n    fun dayOfMonth(): Int {\n        val calendar = Calendar.getInstance()\n        calendar.time = date\n        return calendar.get(Calendar.DAY_OF_MONTH)\n    }\n\n    override fun toString(): String {\n        val sdf = SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.ENGLISH)\n        return sdf.format(date)\n    }\n}\n\n\nfun main() {\n    val date = Date()\n\n    // Creating a DateTime object using \'new\' constructor\n    val time = DateTime(date)\n    println(time)\n\n    // Creating a DateTime object using \'of\' method\n    val now = DateTime.now()\n    val dt = DateTime.of(date)\n    println(now)\n    println(dt)\n\n    // Creating a DateTime object by parsing a date-time string\n    val dateTimeStr = \"2017-01-05 12:34:23\"\n    val dateTime = DateTime.parse(dateTimeStr, \"yyyy-MM-dd HH:mm:ss\")\n    println(dateTime)\n\n    // Retrieving various date-time components\n    val year = dateTime.year()\n    val season = dateTime.seasonEnum()\n    val month = dateTime.monthEnum()\n    val day = dateTime.dayOfMonth()\n\n    println(\"Year: $year\")\n    println(\"Season: $season\")\n    println(\"Month: $month\")\n    println(\"Day of Month: $day\")\n}','kotlin',NULL,'<p>DateTime</p>','2023-09-11 16:15:09',60,'2023-09-11 18:38:39',0);
/*!40000 ALTER TABLE `snippets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `snippets_tag`
--

DROP TABLE IF EXISTS `snippets_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `snippets_tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `snippets_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `snippets_tag_pk` (`snippets_id`,`tag_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `snippets_tag`
--

LOCK TABLES `snippets_tag` WRITE;
/*!40000 ALTER TABLE `snippets_tag` DISABLE KEYS */;
/*!40000 ALTER TABLE `snippets_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tag`
--

DROP TABLE IF EXISTS `tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tag`
--

LOCK TABLES `tag` WRITE;
/*!40000 ALTER TABLE `tag` DISABLE KEYS */;
/*!40000 ALTER TABLE `tag` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2023-09-12 17:37:32
